-- Проверка на повторный инжект
if getgenv().SCP_SCRIPT_INJECTED then
    warn("VeryUp arledy inject!")
    return
end
getgenv().SCP_SCRIPT_INJECTED = true

-- Инициализация скрипта
if not game:IsLoaded() then 
    game.Loaded:Wait()
end

if not syn or not protectgui then
    getgenv().protectgui = function() end
end

-- Adonis bypass
loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua"))()

local badFunctions = {"Crash", "HardCrash", "GPUCrash", "RAMCrash", "KillClient", "SetFPS"}
for i, v in pairs(getgc()) do 
    if type(v) == "function" then
        local info = debug.getinfo(v)
        local functionName = info.name
        if info.source:find('=.Core.Functions') and table.find(badFunctions, functionName) then
            hookfunction(v, function()
            end)
        end
    end
end

-- ReGui
local InsertService = game:GetService("InsertService")
local HttpService = game:GetService("HttpService")

local ReGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local PrefabsId = "rbxassetid://" .. ReGui.PrefabsId

ReGui:Init({
    Prefabs = InsertService:LoadLocalAsset(PrefabsId)
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

local GetPlayers = Players.GetPlayers
local WorldToScreen = Camera.WorldToScreenPoint
local WorldToViewportPoint = Camera.WorldToViewportPoint
local FindFirstChild = game.FindFirstChild
local RenderStepped = RunService.RenderStepped
local GetMouseLocation = UserInputService.GetMouseLocation

local resume = coroutine.resume 
local create = coroutine.create

-- Team Relations
local TeamRelations = {
    ["Class D"] = { Allies = {"Chaos Insurgency"}, Enemies = {"Mobile Task Force", "Scientist", "SCP"} },
    ["Chaos Insurgency"] = { Allies = {"Class D"}, Enemies = {"Mobile Task Force", "Scientist", "SCP"} },
    ["Scientist"] = { Allies = {"Mobile Task Force"}, Enemies = {"Class D", "Chaos Insurgency", "SCP"} },
    ["Mobile Task Force"] = { Allies = {"Scientist"}, Enemies = {"Class D", "Chaos Insurgency", "SCP"} },
    ["SCP"] = { Allies = {}, Enemies = {"Class D", "Chaos Insurgency", "Mobile Task Force", "Scientist"} }
}

-- Функция получения роли игрока
local function getPlayerRole(player)
    if not player then return "Unknown" end
    local team = player.Team
    return team and team.Name or "Unknown"
end

-- Функция получения номера SCP
local function getScpNumber(player)
    if not player then return nil end
    local character = Workspace:FindFirstChild(player.Name)
    if not character then return nil end
    for _, child in pairs(character:GetChildren()) do
        if child:IsA("Script") then
            if child.Name:match("(%d+)Client") or child.Name:match("(%d+)Server") then
                local number = child.Name:match("(%d+)[Client|Server]")
                return number
            end
        end
    end
    return nil
end

-- Окно с вкладками
local TabsWindow = ReGui:TabsWindow({
    Title = "VeryUp",
    Size = UDim2.fromOffset(400, 400)
}):Center()

-- Вкладка Visual
local VisualTab = TabsWindow:CreateTab({Name = "Visual"})
local VisualContent = VisualTab:ScrollingCanvas({Fill = true})

-- Загрузка ESP
local espSuccess, espFuncOrError = pcall(function()
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/sergeytwwwe/VeryUp/refs/heads/main/Esp'))()
end)
if espSuccess and typeof(espFuncOrError) == "function" then
    local services = {Players = Players, RunService = RunService, Workspace = Workspace, LocalPlayer = LocalPlayer, Camera = Camera}
    pcall(function() espFuncOrError(VisualContent, services) end)
end

-- Вкладка Combat
local CombatTab = TabsWindow:CreateTab({Name = "Combat"})
local CombatContent = CombatTab:ScrollingCanvas({Fill = true})

-- Загрузка Combat модуля
local combatSuccess, combatFuncOrError = pcall(function()
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/sergeytwwwe/VeryUp/refs/heads/main/CombatScp'))()
end)
if combatSuccess and typeof(combatFuncOrError) == "function" then
    pcall(function() combatFuncOrError(CombatContent) end)
end

-- Вкладка Misc
local MiscTab = TabsWindow:CreateTab({Name = "Misc"})
local MiscContent = MiscTab:ScrollingCanvas({Fill = true})

-- Noclip
local noclipEnabled = false
local steppedConnection = nil

local function applyNoclip(character)
    if not character then return end
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not noclipEnabled
        end
    end
end

local function restoreCollisions(character)
    if not character then return end
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = true
        end
    end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

local function enableNoclip()
    if steppedConnection then
        steppedConnection:Disconnect()
        steppedConnection = nil
    end
    noclipEnabled = true

    local char = LocalPlayer.Character
    if not char then return end

    applyNoclip(char)

    steppedConnection = RunService.Stepped:Connect(function()
        if not char or not char.Parent then
            char = LocalPlayer.Character
            if not char or not char.Parent then return end
            applyNoclip(char)
        end

        applyNoclip(char)

        if not noclipEnabled then
            restoreCollisions(char)
            steppedConnection:Disconnect()
            steppedConnection = nil
        end
    end)
end

local function disableNoclip()
    noclipEnabled = false
end

LocalPlayer.CharacterAdded:Connect(function(newChar)
    if noclipEnabled then
        applyNoclip(newChar)
    else
        restoreCollisions(newChar)
    end
end)

-- Walkspeed настройки
local WalkspeedSettings = {
    Enabled = false,
    Speed = 16,
    Bind = Enum.KeyCode.J,
    Mode = "Switch",
    IsKeyHeld = false
}

local function setWalkspeed(speed)
    local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.WalkSpeed = speed
    end
end

local function resetOnDeath()
    if LocalPlayer.Character then
        local hum = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
                hum.WalkSpeed = WalkspeedSettings.Speed
            end
        end
        if noclipEnabled then
            enableNoclip()
        else
            disableNoclip()
        end
    end
end
LocalPlayer.CharacterAdded:Connect(resetOnDeath)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == WalkspeedSettings.Bind then
        if WalkspeedSettings.Mode == "Switch" then
            WalkspeedSettings.Enabled = not WalkspeedSettings.Enabled
            if WalkspeedSettings.Enabled then
                setWalkspeed(WalkspeedSettings.Speed)
            end
        elseif WalkspeedSettings.Mode == "Retention" then
            WalkspeedSettings.IsKeyHeld = true
            setWalkspeed(WalkspeedSettings.Speed)
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == WalkspeedSettings.Bind and WalkspeedSettings.Mode == "Retention" then
        WalkspeedSettings.IsKeyHeld = false
    end
end)

resume(create(function()
    RenderStepped:Connect(function()
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
                setWalkspeed(WalkspeedSettings.Speed)
            end
        end
    end)
end))

-- No Fall Damage
local noFallDamageEnabled = false
local oldFireServer
local fallDamageRemote = game.ReplicatedStorage:WaitForChild("PVP"):WaitForChild("FallDamage")

oldFireServer = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    if self == fallDamageRemote and method == "FireServer" and noFallDamageEnabled then
        return
    end
    return oldFireServer(self, ...)
end))

-- Player List
local playerListEnabled = false
local textObjects = {} -- Хранит {player = player, text = text}
local lastUpdateTime = 0
local updateInterval = 0.5 -- Задержка обновления списка

local function animateText(text, state)
    local transparency = state == "in" and 0 or 1
    local scale = state == "in" and 0.5 or 1
    local offsetY = state == "in" and 10 or 0
    local shake = 0
    local animationTime = 0.3
    local startTime = tick()

    local elapsed = 0
    while elapsed < animationTime do
        elapsed = tick() - startTime
        local t = elapsed / animationTime
        if state == "in" then
            transparency = math.min(1, t * 4)
            scale = math.min(1, t * 2 + 0.5)
            offsetY = math.max(0, 10 - t * 20)
        elseif state == "out" then
            transparency = math.max(0, 1 - t * 4)
            scale = math.max(0.5, 1 - t * 0.5)
            offsetY = t * 10
            shake = math.sin(t * 20) * 2
        end
        if text and text.Position then
            text.Transparency = transparency
            text.Size = 16 * scale
            text.Position = Vector2.new(math.min(Camera.ViewportSize.X - 210, text.Position.X + shake), text.Position.Y - offsetY)
        end
        RunService.RenderStepped:Wait()
    end
    if state == "out" and text then
        text:Remove()
    end
end

local function updatePlayerList()
    if not playerListEnabled then
        for _, obj in pairs(textObjects) do
            if obj.text then
                coroutine.wrap(animateText)(obj.text, "out")
            end
        end
        textObjects = {}
        return
    end

    local currentTime = tick()
    if currentTime - lastUpdateTime < updateInterval then return end
    lastUpdateTime = currentTime

    local players = GetPlayers(Players)
    table.sort(players, function(a, b)
        local roleA = getPlayerRole(a)
        local roleB = getPlayerRole(b)
        local priorityA = ({["SCP"] = 1, ["Mobile Task Force"] = 2, ["Chaos Insurgency"] = 3, ["Class D"] = 4, ["Spectator"] = 5, ["Unknown"] = 6})[roleA] or 6
        local priorityB = ({["SCP"] = 1, ["Mobile Task Force"] = 2, ["Chaos Insurgency"] = 3, ["Class D"] = 4, ["Spectator"] = 5, ["Unknown"] = 6})[roleB] or 6
        return priorityA < priorityB
    end)

    -- Создаём новую таблицу для текстов
    local newTextObjects = {}
    local yOffset = 5

    for _, player in pairs(players) do
        local role = getPlayerRole(player)
        local scpNumber = (role == "SCP" and getScpNumber(player)) or nil
        local displayText = scpNumber and (player.Name .. " (SCP-" .. scpNumber .. ")") or (player.Name .. " (" .. role .. ")")

        -- Проверяем, есть ли этот игрок уже в списке
        local existing = nil
        for _, obj in pairs(textObjects) do
            if obj.player == player then
                existing = obj
                break
            end
        end

        local text
        if existing then
            -- Игрок уже есть, обновляем позицию текста
            text = existing.text
            if text.Text ~= displayText then
                -- Роль изменилась, обновляем текст и запускаем анимацию
                text.Text = displayText
                text.Color = Color3.fromRGB(255, 255, 255)
                if role == "SCP" then text.Color = Color3.fromRGB(255, 0, 0)
                elseif role == "Mobile Task Force" then text.Color = Color3.fromRGB(0, 0, 255)
                elseif role == "Chaos Insurgency" then text.Color = Color3.fromRGB(0, 100, 0)
                elseif role == "Class D" then text.Color = Color3.fromRGB(255, 165, 0)
                elseif role == "Spectator" or role == "Unknown" then text.Color = Color3.fromRGB(255, 255, 255) end
                coroutine.wrap(animateText)(text, "in")
            end
            text.Position = Vector2.new(Camera.ViewportSize.X - 200, yOffset)
        else
            -- Новый игрок, создаём текст и анимацию
            text = Drawing.new("Text")
            text.Text = displayText
            text.Center = true
            text.Color = Color3.fromRGB(255, 255, 255)
            if role == "SCP" then text.Color = Color3.fromRGB(255, 0, 0)
            elseif role == "Mobile Task Force" then text.Color = Color3.fromRGB(0, 0, 255)
            elseif role == "Chaos Insurgency" then text.Color = Color3.fromRGB(0, 100, 0)
            elseif role == "Class D" then text.Color = Color3.fromRGB(255, 165, 0)
            elseif role == "Spectator" or role == "Unknown" then text.Color = Color3.fromRGB(255, 255, 255) end
            text.Size = 16
            text.Font = 3
            text.Outline = true
            text.OutlineColor = Color3.fromRGB(0, 0, 0)
            text.Position = Vector2.new(Camera.ViewportSize.X - 200, yOffset)
            text.Visible = true
            text.Transparency = 0
            text.ZIndex = 999
            coroutine.wrap(animateText)(text, "in")
        end

        table.insert(newTextObjects, {player = player, text = text})
        yOffset = math.min(yOffset + 20, Camera.ViewportSize.Y - 50)
    end

    -- Удаляем тексты игроков, которых больше нет
    for _, obj in pairs(textObjects) do
        local found = false
        for _, player in pairs(players) do
            if obj.player == player then
                found = true
                break
            end
        end
        if not found and obj.text then
            coroutine.wrap(animateText)(obj.text, "out")
        end
    end

    textObjects = newTextObjects
end

resume(create(function()
    RenderStepped:Connect(function()
        updatePlayerList()
    end)
end))

Players.PlayerAdded:Connect(function()
    updatePlayerList()
end)
Players.PlayerRemoving:Connect(function()
    updatePlayerList()
end)

-- UI для вкладки Misc
local MiscHeader = MiscContent:CollapsingHeader({Title = "Movement"})
local NoclipEnableCheckbox = MiscHeader:Checkbox({
    IniFlag = "NoclipEnabled",
    Label = "Noclip Enable",
    Value = noclipEnabled,
    Callback = function(self, value)
        if value then
            enableNoclip()
        else
            disableNoclip()
        end
    end
})

local WalkspeedEnableCheckbox = MiscHeader:Checkbox({
    IniFlag = "WalkspeedEnabled",
    Label = "Walkspeed Enable",
    Value = WalkspeedSettings.Enabled,
    Callback = function(self, value)
        WalkspeedSettings.Enabled = value
        if value then setWalkspeed(WalkspeedSettings.Speed) end
    end
})

MiscHeader:Combo({
    IniFlag = "WalkspeedMode",
    Label = "Mode",
    Selected = WalkspeedSettings.Mode,
    Items = {"Switch", "Retention"},
    Callback = function(self, value)
        WalkspeedSettings.Mode = value
    end
})

MiscHeader:Keybind({
    IniFlag = "WalkspeedBind",
    Label = "Bind",
    Value = WalkspeedSettings.Bind,
    Callback = function(self, value)
        if value == SilentAimSettings.Bind then
            self:SetValue(WalkspeedSettings.Bind)
            return
        end
        WalkspeedSettings.Bind = value
    end
})

MiscHeader:SliderInt({
    IniFlag = "WalkspeedSpeed",
    Label = "Speed",
    Value = WalkspeedSettings.Speed,
    Minimum = 1,
    Maximum = 100,
    Callback = function(self, value)
        WalkspeedSettings.Speed = value
        if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
            setWalkspeed(value)
        end
    end
})

local NoFallDamageCheckbox = MiscHeader:Checkbox({
    IniFlag = "NoFallDamageEnabled",
    Label = "No Fall Damage",
    Value = noFallDamageEnabled,
    Callback = function(self, value)
        noFallDamageEnabled = value
    end
})

local PlayerListCheckbox = MiscHeader:Checkbox({
    IniFlag = "PlayerListEnabled",
    Label = "Player List",
    Value = playerListEnabled,
    Callback = function(self, value)
        playerListEnabled = value
        updatePlayerList()
    end
})

-- Вкладка Config
local ConfigTab = TabsWindow:CreateTab({Name = "Config"})
local ConfigContent = ConfigTab:ScrollingCanvas({Fill = true})

-- Система конфигураций
local baseFolder = "VeryUp/SCP Demonstration"
local configFolder = baseFolder .. "/config"
local assetFolder = baseFolder .. "/asset"
if not isfolder("VeryUp") then makefolder("VeryUp") end
if not isfolder(baseFolder) then makefolder(baseFolder) end
if not isfolder(configFolder) then makefolder(configFolder) end
if not isfolder(assetFolder) then makefolder(assetFolder) end

local configNameInput = ""
local configList = {}
local configCombo = nil

local function updateConfigList()
    local files = listfiles(configFolder)
    if not files then
        files = {}
    end
    configList = {}
    for _, file in pairs(files) do
        local configName = file:match("[^\\/]+%.ini$")
        if configName then
            configName = configName:match("^(.+)%.ini$")
            if configName then
                table.insert(configList, configName)
            end
        end
    end
    if configCombo then
        configCombo.Items = configList
        if #configList > 0 then
            configCombo.Selected = configList[1]
            configNameInput = configList[1]
        else
            configCombo.Selected = ""
            configNameInput = ""
        end
    end
end

-- UI для вкладки Config
local ConfigHeader = ConfigContent:CollapsingHeader({Title = "Config Management"})
ConfigHeader:Separator({Text = "Config Management"})

ConfigHeader:InputText({
    IniFlag = "ConfigNameInput",
    Label = "Config Name",
    Value = "",
    Placeholder = "Enter config name",
    Callback = function(self, value)
        configNameInput = value
    end
})

ConfigHeader:Button({
    Text = "Create Config",
    Callback = function()
        if configNameInput == "" then
            return
        end
        local configPath = configFolder .. "/" .. configNameInput .. ".ini"
        if isfile(configPath) then
            return
        end
        local saveString = ReGui:DumpIni(true)
        if saveString then
            writefile(configPath, saveString)
            updateConfigList()
        end
    end
})

ConfigHeader:Button({
    Text = "Load Config",
    Callback = function()
        if configNameInput == "" then
            return
        end
        local configPath = configFolder .. "/" .. configNameInput .. ".ini"
        if isfile(configPath) then
            local configData = readfile(configPath)
            ReGui:LoadIni(configData, true)
            local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
                if hum then
                    hum.WalkSpeed = WalkspeedSettings.Speed
                end
            end
            if noclipEnabled then
                enableNoclip()
            else
                disableNoclip()
            end
        end
    end
})

ConfigHeader:Button({
    Text = "Reload Config List",
    Callback = function()
        updateConfigList()
    end
})

configCombo = ConfigHeader:Combo({
    IniFlag = "ConfigList",
    Label = "Config List",
    Selected = "",
    Items = configList,
    Callback = function(self, value)
        configNameInput = value
    end
})

ConfigHeader:Button({
    Text = "Delete Config",
    Callback = function()
        if configNameInput == "" then
            return
        end
        local configPath = configFolder .. "/" .. configNameInput .. ".ini"
        if isfile(configPath) then
            delfile(configPath)
            updateConfigList()
        end
    end
})

-- Инициализация списка конфигов при запуске
updateConfigList()

-- Загрузка конфига по умолчанию, если существует
if isfile(configFolder .. "/default.ini") then
    configNameInput = "default"
    local configData = readfile(configFolder .. "/default.ini")
    ReGui:LoadIni(configData, true)
    local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
        if hum then
            hum.WalkSpeed = WalkspeedSettings.Speed
        end
    end
    if noclipEnabled then
        enableNoclip()
    else
        disableNoclip()
    end
end
