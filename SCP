-- Инициализация скрипта
if not game:IsLoaded() then 
    game.Loaded:Wait()
end

if not syn or not protectgui then
    getgenv().protectgui = function() end
end

-- Adonis bypass
loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua"))()

local badFunctions = {"Crash", "HardCrash", "GPUCrash", "RAMCrash", "KillClient", "SetFPS"}
for i,v in pairs(getgc()) do 
    if type(v) == "function" then
        local info = debug.getinfo(v)
        local functionName = info.name
        if info.source:find('=.Core.Functions') and table.find(badFunctions, functionName) then
            hookfunction(v, function()
            end)
        end
    end
end

-- ReGui
local InsertService = game:GetService("InsertService")
local HttpService = game:GetService("HttpService")

local ReGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local PrefabsId = "rbxassetid://" .. ReGui.PrefabsId

ReGui:Init({
    Prefabs = InsertService:LoadLocalAsset(PrefabsId)
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

local GetPlayers = Players.GetPlayers
local WorldToScreen = Camera.WorldToScreenPoint
local WorldToViewportPoint = Camera.WorldToViewportPoint
local FindFirstChild = game.FindFirstChild
local RenderStepped = RunService.RenderStepped
local GetMouseLocation = UserInputService.GetMouseLocation

local resume = coroutine.resume 
local create = coroutine.create

-- Team Relations
local TeamRelations = {
    ["Class D"] = { Allies = {"Chaos Insurgency"}, Enemies = {"Mobile Task Force", "Scientist", "SCP"} },
    ["Chaos Insurgency"] = { Allies = {"Class D"}, Enemies = {"Mobile Task Force", "Scientist", "SCP"} },
    ["Scientist"] = { Allies = {"Mobile Task Force"}, Enemies = {"Class D", "Chaos Insurgency", "SCP"} },
    ["Mobile Task Force"] = { Allies = {"Scientist"}, Enemies = {"Class D", "Chaos Insurgency", "SCP"} },
    ["SCP"] = { Allies = {}, Enemies = {"Class D", "Chaos Insurgency", "Mobile Task Force", "Scientist"} }
}

-- Функция получения роли игрока
local function getPlayerRole(player)
    if not player then return "Unknown" end
    local team = player.Team
    return team and team.Name or "Unknown"
end

-- Notifications
local showNotification
local notifSuccess, notifError = pcall(function()
    showNotification = loadstring(game:HttpGet("https://raw.githubusercontent.com/sergeytwwwe/VeryUp/refs/heads/main/VeryUpNotifications"))()
end)
if not notifSuccess then
    warn("Failed to load VeryUpNotifications: " .. notifError)
    showNotification = function(message, isError)
        if isError then
            warn("[Notification] " .. message)
        else
            print("[Notification] " .. message)
        end
    end
end

-- Окно с вкладками
local TabsWindow = ReGui:TabsWindow({
    Title = "ESP Loader",
    Size = UDim2.fromOffset(400, 400)
}):Center()

-- Вкладка Visual
local VisualTab = TabsWindow:CreateTab({Name = "Visual"})
local VisualContent = VisualTab:ScrollingCanvas({Fill = true})

-- Загрузка ESP
local espSuccess, espFuncOrError = pcall(function()
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/sergeytwwwe/VeryUp/refs/heads/main/Esp'))()
end)
if espSuccess and typeof(espFuncOrError) == "function" then
    local services = {Players = Players, RunService = RunService, Workspace = Workspace, LocalPlayer = LocalPlayer, Camera = Camera}
    local success, err = pcall(function() espFuncOrError(VisualContent, services) end)
    if not success then warn("Failed to initialize ESP: " .. err) else print("ESP loaded successfully") end
else
    warn("Failed to load ESP: " .. (espFuncOrError or "Unknown error"))
end

-- Вкладка Combat
local CombatTab = TabsWindow:CreateTab({Name = "Combat"})
local CombatContent = CombatTab:ScrollingCanvas({Fill = true})

-- Загрузка Combat модуля
local combatSuccess, combatFuncOrError = pcall(function()
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/sergeytwwwe/VeryUp/refs/heads/main/CombatScp'))()
end)
if combatSuccess and typeof(combatFuncOrError) == "function" then
    local success, err = pcall(function() combatFuncOrError(CombatContent) end)
    if not success then warn("Failed to initialize Combat: " .. err) else print("Combat loaded successfully") end
else
    warn("Failed to load Combat: " .. (combatFuncOrError or "Unknown error"))
end

-- Вкладка Misc
local MiscTab = TabsWindow:CreateTab({Name = "Misc"})
local MiscContent = MiscTab:ScrollingCanvas({Fill = true})

-- Noclip
local noclipEnabled = false
local steppedConnection = nil

local function applyNoclip(character)
    if not character then return end
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not noclipEnabled
        end
    end
end

local function restoreCollisions(character)
    if not character then return end
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = true
        end
    end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

local function enableNoclip()
    if steppedConnection then
        steppedConnection:Disconnect()
        steppedConnection = nil
    end
    noclipEnabled = true

    local char = LocalPlayer.Character
    if not char then return end

    applyNoclip(char)

    steppedConnection = RunService.Stepped:Connect(function()
        if not char or not char.Parent then
            char = LocalPlayer.Character
            if not char or not char.Parent then return end
            applyNoclip(char)
        end

        applyNoclip(char)

        if not noclipEnabled then
            restoreCollisions(char)
            steppedConnection:Disconnect()
            steppedConnection = nil
        end
    end)
end

local function disableNoclip()
    noclipEnabled = false
end

LocalPlayer.CharacterAdded:Connect(function(newChar)
    if noclipEnabled then
        applyNoclip(newChar)
    else
        restoreCollisions(newChar)
    end
end)

-- Walkspeed настройки
local WalkspeedSettings = {
    Enabled = false,
    Speed = 16,
    Bind = Enum.KeyCode.J,
    Mode = "Switch",
    IsKeyHeld = false
}

local function setWalkspeed(speed)
    local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.WalkSpeed = speed
    end
end

local function resetOnDeath()
    if LocalPlayer.Character then
        local hum = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
                hum.WalkSpeed = WalkspeedSettings.Speed
            end
        end
        if noclipEnabled then
            enableNoclip()
        else
            disableNoclip()
        end
    end
end
LocalPlayer.CharacterAdded:Connect(resetOnDeath)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == WalkspeedSettings.Bind then
        if WalkspeedSettings.Mode == "Switch" then
            WalkspeedSettings.Enabled = not WalkspeedSettings.Enabled
            if WalkspeedSettings.Enabled then
                setWalkspeed(WalkspeedSettings.Speed)
            end
        elseif WalkspeedSettings.Mode == "Retention" then
            WalkspeedSettings.IsKeyHeld = true
            setWalkspeed(WalkspeedSettings.Speed)
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == WalkspeedSettings.Bind and WalkspeedSettings.Mode == "Retention" then
        WalkspeedSettings.IsKeyHeld = false
    end
end)

resume(create(function()
    RenderStepped:Connect(function()
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
                setWalkspeed(WalkspeedSettings.Speed)
            end
        end
    end)
end))

-- No Fall Damage
local noFallDamageEnabled = false
local oldFireServer
local fallDamageRemote = game.ReplicatedStorage:WaitForChild("PVP"):WaitForChild("FallDamage")

oldFireServer = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    if self == fallDamageRemote and method == "FireServer" and noFallDamageEnabled then
        return
    end
    return oldFireServer(self, ...)
end))

-- UI для вкладки Misc
local MiscHeader = MiscContent:CollapsingHeader({Title = "Movement"})
local NoclipEnableCheckbox = MiscHeader:Checkbox({
    IniFlag = "NoclipEnabled",
    Label = "Noclip Enable",
    Value = noclipEnabled,
    Callback = function(self, value)
        if value then
            enableNoclip()
        else
            disableNoclip()
        end
    end
})

local WalkspeedEnableCheckbox = MiscHeader:Checkbox({
    IniFlag = "WalkspeedEnabled",
    Label = "Walkspeed Enable",
    Value = WalkspeedSettings.Enabled,
    Callback = function(self, value)
        WalkspeedSettings.Enabled = value
        if value then setWalkspeed(WalkspeedSettings.Speed) end
    end
})

MiscHeader:Combo({
    IniFlag = "WalkspeedMode",
    Label = "Mode",
    Selected = WalkspeedSettings.Mode,
    Items = {"Switch", "Retention"},
    Callback = function(self, value)
        WalkspeedSettings.Mode = value
    end
})

MiscHeader:Keybind({
    IniFlag = "WalkspeedBind",
    Label = "Bind",
    Value = WalkspeedSettings.Bind,
    Callback = function(self, value)
        if value == SilentAimSettings.Bind or value == AimbotSettings.Bind then
            showNotification("This bind is already used!", true)
            self:SetValue(WalkspeedSettings.Bind)
            return
        end
        WalkspeedSettings.Bind = value
    end
})

MiscHeader:SliderInt({
    IniFlag = "WalkspeedSpeed",
    Label = "Speed",
    Value = WalkspeedSettings.Speed,
    Minimum = 1,
    Maximum = 100,
    Callback = function(self, value)
        WalkspeedSettings.Speed = value
        if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
            setWalkspeed(value)
        end
    end
})

local NoFallDamageCheckbox = MiscHeader:Checkbox({
    IniFlag = "NoFallDamageEnabled",
    Label = "No Fall Damage",
    Value = noFallDamageEnabled,
    Callback = function(self, value)
        noFallDamageEnabled = value
        if value then
            showNotification("No Fall Damage enabled!", false)
        else
            showNotification("No Fall Damage disabled!", false)
        end
    end
})

-- Вкладка Config
local ConfigTab = TabsWindow:CreateTab({Name = "Config"})
local ConfigContent = ConfigTab:ScrollingCanvas({Fill = true})

-- Система конфигураций
local baseFolder = "Title Here"
local configFolder = baseFolder .. "/Config"
if not isfolder(baseFolder) then makefolder(baseFolder) end
if not isfolder(configFolder) then makefolder(configFolder) end

local configNameInput = ""
local configList = {}
local configCombo = nil

local function updateConfigList()
    local files = listfiles(configFolder)
    if not files then
        warn("listfiles returned nil for folder: " .. configFolder)
        files = {}
    end
    configList = {}
    for _, file in pairs(files) do
        local configName = file:match("[^\\/]+%.ini$")
        if configName then
            configName = configName:match("^(.+)%.ini$")
            if configName then
                table.insert(configList, configName)
                warn("Found config: " .. configName)
            else
                warn("Failed to extract config name from file: " .. file)
            end
        else
            warn("File does not match pattern: " .. file)
        end
    end
    warn("Total configs found: " .. #configList)
    if configCombo then
        configCombo.Items = configList
        if #configList > 0 then
            configCombo.Selected = configList[1]
            configNameInput = configList[1]
        else
            configCombo.Selected = ""
            configNameInput = ""
        end
    else
        warn("configCombo is nil, cannot update Items")
    end
end

-- UI для вкладки Config
local ConfigHeader = ConfigContent:CollapsingHeader({Title = "Config Management"})
ConfigHeader:Separator({Text = "Config Management"})

ConfigHeader:InputText({
    IniFlag = "ConfigNameInput",
    Label = "Config Name",
    Value = "",
    Placeholder = "Enter config name",
    Callback = function(self, value)
        configNameInput = value
    end
})

ConfigHeader:Button({
    Text = "Create Config",
    Callback = function()
        if configNameInput == "" then
            showNotification("Please enter a config name!", true)
            return
        end
        local configPath = configFolder .. "/" .. configNameInput .. ".ini"
        if isfile(configPath) then
            showNotification("This config already exists!", true)
            return
        end
        local saveString = ReGui:DumpIni(true)
        if saveString then
            writefile(configPath, saveString)
            updateConfigList()
            showNotification("Config '" .. configNameInput .. "' created successfully!", false)
        else
            showNotification("Failed to create config!", true)
        end
    end
})

ConfigHeader:Button({
    Text = "Load Config",
    Callback = function()
        if configNameInput == "" then
            showNotification("Please select a config!", true)
            return
        end
        local configPath = configFolder .. "/" .. configNameInput .. ".ini"
        if isfile(configPath) then
            local configData = readfile(configPath)
            ReGui:LoadIni(configData, true)
            -- Применяем настройки после загрузки
            local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
                if hum then
                    hum.WalkSpeed = WalkspeedSettings.Speed
                end
            end
            if noclipEnabled then
                enableNoclip()
            else
                disableNoclip()
            end
            showNotification("Config '" .. configNameInput .. "' loaded successfully!", false)
        else
            showNotification("Config '" .. configNameInput .. "' does not exist!", true)
        end
    end
})

ConfigHeader:Button({
    Text = "Reload Config List",
    Callback = function()
        updateConfigList()
        showNotification("Config list refreshed!", false)
    end
})

configCombo = ConfigHeader:Combo({
    IniFlag = "ConfigList",
    Label = "Config List",
    Selected = "",
    Items = configList,
    Callback = function(self, value)
        configNameInput = value
    end
})

ConfigHeader:Button({
    Text = "Delete Config",
    Callback = function()
        if configNameInput == "" then
            showNotification("Please select a config!", true)
            return
        end
        local configPath = configFolder .. "/" .. configNameInput .. ".ini"
        if isfile(configPath) then
            delfile(configPath)
            updateConfigList()
            showNotification("Config '" .. configNameInput .. "' deleted successfully!", false)
        else
            showNotification("Config '" .. configNameInput .. "' does not exist!", true)
        end
    end
})

-- Инициализация списка конфигов при запуске
updateConfigList()

-- Загрузка конфига по умолчанию, если существует
if isfile(configFolder .. "/default.ini") then
    configNameInput = "default"
    local configData = readfile(configFolder .. "/default.ini")
    ReGui:LoadIni(configData, true)
    -- Применяем настройки после загрузки
    local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if WalkspeedSettings.Enabled or (WalkspeedSettings.Mode == "Retention" and WalkspeedSettings.IsKeyHeld) then
        if hum then
            hum.WalkSpeed = WalkspeedSettings.Speed
        end
    end
    if noclipEnabled then
        enableNoclip()
    else
        disableNoclip()
    end
end
