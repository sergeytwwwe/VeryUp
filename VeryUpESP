return function(ReGui, TabsWindow)
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local CoreGui = game:GetService("CoreGui")

    local LocalPlayer = Players.LocalPlayer
    local Camera = workspace.CurrentCamera

    local ESPObjects = {}
    local Connections = {}

    local ESPSettings = {
        Enabled = false,
        BoxMode = "2D Box",
        DisplayMode = "All Players",
        Name = true,
        Distance = true,
        Health = true,
        Skeleton = false,
        Chams = false,
        MaxDistance = 5000,
        Colors = {
            Box = Color3.fromRGB(0, 255, 255),
            Box3D = Color3.fromRGB(0, 255, 0),
            Name = Color3.fromRGB(200, 240, 255),
            Distance = Color3.fromRGB(255, 215, 0),
            Health = Color3.fromRGB(0, 255, 0),
            Skeleton = Color3.fromRGB(255, 255, 255),
            Chams = Color3.fromRGB(255, 0, 0)
        }
    }

    local function CreateESP(player)
        if player == LocalPlayer or ESPObjects[player] then return end

        local character = player.Character
        if not character or not character:FindFirstChild("Humanoid") then return end
        local humanoid = character.Humanoid
        if humanoid.Health <= 0 then return end -- Не создаём ESP для мёртвых игроков

        ESPObjects[player] = {
            Box = Drawing.new("Square"),
            BoxOutline = Drawing.new("Square"),
            Box3D = {Lines = {}},
            Name = Drawing.new("Text"),
            Distance = Drawing.new("Text"),
            HealthBarBackground = Drawing.new("Line"),
            HealthBarFill = Drawing.new("Line"),
            HealthText = Drawing.new("Text"),
            Skeleton = {},
            Chams = nil
        }

        for _, obj in pairs(ESPObjects[player]) do
            if typeof(obj) == "table" and obj.Lines then
                for i = 1, 12 do
                    obj.Lines[i] = Drawing.new("Line")
                end
            elseif obj ~= ESPObjects[player].Skeleton and obj ~= ESPObjects[player].Chams then
                obj.Visible = false
            end
        end

        if player.Character and player.Character:FindFirstChild("Humanoid") then
            local diedConnection
            diedConnection = humanoid.Died:Connect(function()
                if ESPObjects[player] then
                    for key, obj in pairs(ESPObjects[player]) do
                        if key == "Skeleton" then
                            for _, line in pairs(obj) do
                                if line then
                                    line.Visible = false
                                end
                            end
                        elseif key == "Chams" then
                            if obj then
                                obj.Enabled = false
                            end
                        elseif key == "Box3D" then
                            for _, line in pairs(obj.Lines) do
                                if line then
                                    line.Visible = false
                                end
                            end
                        elseif obj then
                            obj.Visible = false
                        end
                    end
                end
                if diedConnection then
                    diedConnection:Disconnect()
                end
            end)
            table.insert(Connections, diedConnection)
        end
    end

    local function UpdateESP()
        for player, esp in pairs(ESPObjects) do
            if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") or not player.Character:FindFirstChild("Head") then
                for key, obj in pairs(esp) do
                    if key == "Skeleton" then
                        for _, line in pairs(obj) do
                            if line then
                                line.Visible = false
                            end
                        end
                    elseif key == "Chams" then
                        if obj then
                            obj.Enabled = false
                        end
                    elseif key == "Box3D" then
                        for _, line in pairs(obj.Lines) do
                            if line then
                                line.Visible = false
                            end
                        end
                    elseif obj then
                        obj.Visible = false
                    end
                end
                continue
            end

            local humanoid = player.Character:FindFirstChild("Humanoid")
            if not humanoid or humanoid.Health <= 0 then -- Пропускаем мёртвых игроков
                for key, obj in pairs(esp) do
                    if key == "Skeleton" then
                        for _, line in pairs(obj) do
                            if line then
                                line.Visible = false
                            end
                        end
                    elseif key == "Chams" then
                        if obj then
                            obj.Enabled = false
                        end
                    elseif key == "Box3D" then
                        for _, line in pairs(obj.Lines) do
                            if line then
                                line.Visible = false
                            end
                        end
                    elseif obj then
                        obj.Visible = false
                    end
                end
                continue
            end

            local rootPart = player.Character.HumanoidRootPart
            local head = player.Character.Head
            local distance = (Camera.CFrame.Position - rootPart.Position).Magnitude

            local shouldDisplay = false
            if ESPSettings.DisplayMode == "All Players" then
                shouldDisplay = true
            elseif ESPSettings.DisplayMode == "Teammates" then
                shouldDisplay = player.Team == LocalPlayer.Team
            elseif ESPSettings.DisplayMode == "Enemies" then
                shouldDisplay = player.Team ~= LocalPlayer.Team
            end

            if not ESPSettings.Enabled or not shouldDisplay or distance > ESPSettings.MaxDistance then
                for key, obj in pairs(esp) do
                    if key == "Skeleton" then
                        for _, line in pairs(obj) do
                            if line then
                                line.Visible = false
                            end
                        end
                    elseif key == "Chams" then
                        if obj then
                            obj.Enabled = false
                        end
                    elseif key == "Box3D" then
                        for _, line in pairs(obj.Lines) do
                            if line then
                                line.Visible = false
                            end
                        end
                    elseif obj then
                        obj.Visible = false
                    end
                end
                continue
            end

            local headPos, headOnScreen = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 0.5, 0))
            local rootPos, rootOnScreen = Camera:WorldToViewportPoint(rootPart.Position)
            local legsPos = rootPart.Position - Vector3.new(0, 3, 0)
            local topPos = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 0.5, 0))
            local bottomPos = Camera:WorldToViewportPoint(legsPos - Vector3.new(0, 0.5, 0))
            local leftPos = Camera:WorldToViewportPoint(rootPart.Position - Vector3.new(1.5, 0, 0))
            local rightPos = Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(1.5, 0, 0))
            local screenPos = Vector2.new(rootPos.X, rootPos.Y)

            if not headOnScreen or not rootOnScreen then
                for key, obj in pairs(esp) do
                    if key == "Skeleton" then
                        for _, line in pairs(obj) do
                            if line then
                                line.Visible = false
                            end
                        end
                    elseif key == "Chams" then
                        if obj then
                            obj.Enabled = false
                        end
                    elseif key == "Box3D" then
                        for _, line in pairs(obj.Lines) do
                            if line then
                                line.Visible = false
                            end
                        end
                    elseif obj then
                        obj.Visible = false
                    end
                end
                continue
            end

            local dynamicThickness = math.clamp(1.5 - (rootPos.Z / 1000) * 0.5, 1, 2)

            if ESPSettings.BoxMode == "2D Box" then
                local boxWidth = (rightPos.X - leftPos.X)
                local boxHeight = (topPos.Y - bottomPos.Y)
                local boxPos = Vector2.new(leftPos.X, topPos.Y - boxHeight - 5)

                esp.Box.Visible = true
                esp.Box.Position = boxPos
                esp.Box.Size = Vector2.new(boxWidth, boxHeight)
                esp.Box.Color = ESPSettings.Colors.Box
                esp.Box.Thickness = dynamicThickness
                esp.Box.Filled = false

                esp.BoxOutline.Visible = true
                esp.BoxOutline.Position = boxPos
                esp.BoxOutline.Size = Vector2.new(boxWidth, boxHeight)
                esp.BoxOutline.Color = Color3.fromRGB(0, 0, 0)
                esp.BoxOutline.Thickness = dynamicThickness + 1
                esp.BoxOutline.Filled = false

                for _, line in pairs(esp.Box3D.Lines) do
                    line.Visible = false
                end
            elseif ESPSettings.BoxMode == "3D Box" then
                local boxSize = Vector3.new(2, 4, 1)
                local corners = {
                    Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(boxSize.X, boxSize.Y, boxSize.Z)),
                    Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(-boxSize.X, boxSize.Y, boxSize.Z)),
                    Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(-boxSize.X, -boxSize.Y, boxSize.Z)),
                    Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(boxSize.X, -boxSize.Y, boxSize.Z)),
                    Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(boxSize.X, boxSize.Y, -boxSize.Z)),
                    Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(-boxSize.X, boxSize.Y, -boxSize.Z)),
                    Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(-boxSize.X, -boxSize.Y, -boxSize.Z)),
                    Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(boxSize.X, -boxSize.Y, -boxSize.Z))
                }

                for i, line in pairs(esp.Box3D.Lines) do
                    line.Visible = true
                    line.Color = ESPSettings.Colors.Box3D
                    line.Thickness = dynamicThickness

                    if i == 1 then
                        line.From = Vector2.new(corners[1].X, corners[1].Y)
                        line.To = Vector2.new(corners[2].X, corners[2].Y)
                    elseif i == 2 then
                        line.From = Vector2.new(corners[2].X, corners[2].Y)
                        line.To = Vector2.new(corners[3].X, corners[3].Y)
                    elseif i == 3 then
                        line.From = Vector2.new(corners[3].X, corners[3].Y)
                        line.To = Vector2.new(corners[4].X, corners[4].Y)
                    elseif i == 4 then
                        line.From = Vector2.new(corners[4].X, corners[4].Y)
                        line.To = Vector2.new(corners[1].X, corners[1].Y)
                    elseif i == 5 then
                        line.From = Vector2.new(corners[5].X, corners[5].Y)
                        line.To = Vector2.new(corners[6].X, corners[6].Y)
                    elseif i == 6 then
                        line.From = Vector2.new(corners[6].X, corners[6].Y)
                        line.To = Vector2.new(corners[7].X, corners[7].Y)
                    elseif i == 7 then
                        line.From = Vector2.new(corners[7].X, corners[7].Y)
                        line.To = Vector2.new(corners[8].X, corners[8].Y)
                    elseif i == 8 then
                        line.From = Vector2.new(corners[8].X, corners[8].Y)
                        line.To = Vector2.new(corners[5].X, corners[5].Y)
                    elseif i == 9 then
                        line.From = Vector2.new(corners[1].X, corners[1].Y)
                        line.To = Vector2.new(corners[5].X, corners[5].Y)
                    elseif i == 10 then
                        line.From = Vector2.new(corners[2].X, corners[2].Y)
                        line.To = Vector2.new(corners[6].X, corners[6].Y)
                    elseif i == 11 then
                        line.From = Vector2.new(corners[3].X, corners[3].Y)
                        line.To = Vector2.new(corners[7].X, corners[7].Y)
                    elseif i == 12 then
                        line.From = Vector2.new(corners[4].X, corners[4].Y)
                        line.To = Vector2.new(corners[8].X, corners[8].Y)
                    end
                end

                esp.Box.Visible = false
                esp.BoxOutline.Visible = false
            else
                esp.Box.Visible = false
                esp.BoxOutline.Visible = false
                for _, line in pairs(esp.Box3D.Lines) do
                    line.Visible = false
                end
            end

            if ESPSettings.Name then
                esp.Name.Visible = true
                esp.Name.Position = Vector2.new(screenPos.X, topPos.Y - (ESPSettings.BoxMode == "2D Box" and (topPos.Y - bottomPos.Y) or 0) - 25)
                esp.Name.Text = player.Name
                esp.Name.Color = ESPSettings.Colors.Name
                esp.Name.Size = 14
                esp.Name.Center = true
            else
                esp.Name.Visible = false
            end

            if ESPSettings.Distance then
                esp.Distance.Visible = true
                esp.Distance.Position = Vector2.new(screenPos.X, bottomPos.Y + 5)
                esp.Distance.Text = math.floor(distance) .. " studs"
                esp.Distance.Color = ESPSettings.Colors.Distance
                esp.Distance.Size = 14
                esp.Distance.Center = true
            else
                esp.Distance.Visible = false
            end

            if ESPSettings.Health and humanoid then
                local healthPercent = humanoid.Health / humanoid.MaxHealth
                local healthBarHeight = (topPos.Y - bottomPos.Y) * healthPercent
                local healthBarThickness = math.clamp(1 - (rootPos.Z / 1000) * 0.3, 0.7, 1.2)
                local healthColor = healthPercent > 0.5 and Color3.fromRGB(0, 255, 0) or healthPercent > 0.25 and Color3.fromRGB(255, 255, 0) or Color3.fromRGB(255, 0, 0)

                esp.HealthBarBackground.Visible = true
                esp.HealthBarBackground.From = Vector2.new(leftPos.X - 10, topPos.Y)
                esp.HealthBarBackground.To = Vector2.new(leftPos.X - 10, bottomPos.Y)
                esp.HealthBarBackground.Color = Color3.fromRGB(50, 50, 50)
                esp.HealthBarBackground.Thickness = 5 * healthBarThickness

                esp.HealthBarFill.Visible = true
                esp.HealthBarFill.From = Vector2.new(leftPos.X - 10, topPos.Y)
                esp.HealthBarFill.To = Vector2.new(leftPos.X - 10, topPos.Y + (bottomPos.Y - topPos.Y) * (1 - healthPercent))
                esp.HealthBarFill.Color = healthColor
                esp.HealthBarFill.Thickness = 3 * healthBarThickness

                esp.HealthText.Visible = true
                esp.HealthText.Position = Vector2.new(leftPos.X - 30, topPos.Y + (bottomPos.Y - topPos.Y) * (1 - healthPercent) / 2)
                esp.HealthText.Text = math.floor(humanoid.Health)
                esp.HealthText.Color = healthColor
                esp.HealthText.Size = 14
            else
                esp.HealthBarBackground.Visible = false
                esp.HealthBarFill.Visible = false
                esp.HealthText.Visible = false
            end

            if ESPSettings.Skeleton then
                local parts = {
                    Head = player.Character:FindFirstChild("Head"),
                    Torso = player.Character:FindFirstChild("UpperTorso") or player.Character:FindFirstChild("Torso"),
                    LeftArm = player.Character:FindFirstChild("LeftUpperArm") or player.Character:FindFirstChild("Left Arm"),
                    LeftHand = player.Character:FindFirstChild("LeftLowerArm") or player.Character:FindFirstChild("Left Hand"),
                    RightArm = player.Character:FindFirstChild("RightUpperArm") or player.Character:FindFirstChild("Right Arm"),
                    RightHand = player.Character:FindFirstChild("RightLowerArm") or player.Character:FindFirstChild("Right Hand"),
                    LeftLeg = player.Character:FindFirstChild("LeftUpperLeg") or player.Character:FindFirstChild("Left Leg"),
                    LeftFoot = player.Character:FindFirstChild("LeftLowerLeg") or player.Character:FindFirstChild("Left Foot"),
                    RightLeg = player.Character:FindFirstChild("RightUpperLeg") or player.Character:FindFirstChild("Right Leg"),
                    RightFoot = player.Character:FindFirstChild("RightLowerLeg") or player.Character:FindFirstChild("Right Foot")
                }

                local skeletonLines = {
                    {from = "Head", to = "Torso"},
                    {from = "Torso", to = "LeftArm"},
                    {from = "LeftArm", to = "LeftHand"},
                    {from = "Torso", to = "RightArm"},
                    {from = "RightArm", to = "RightHand"},
                    {from = "Torso", to = "LeftLeg"},
                    {from = "LeftLeg", to = "LeftFoot"},
                    {from = "Torso", to = "RightLeg"},
                    {from = "RightLeg", to = "RightFoot"}
                }

                for i, lineInfo in ipairs(skeletonLines) do
                    local fromPart = parts[lineInfo.from]
                    local toPart = parts[lineInfo.to]

                    if not esp.Skeleton[i] then
                        esp.Skeleton[i] = Drawing.new("Line")
                    end

                    local line = esp.Skeleton[i]
                    if fromPart and toPart then
                        local fromPos, fromOnScreen = Camera:WorldToViewportPoint(fromPart.Position)
                        local toPos, toOnScreen = Camera:WorldToViewportPoint(toPart.Position)
                        if fromOnScreen and toOnScreen then
                            line.Visible = true
                            line.From = Vector2.new(fromPos.X, fromPos.Y)
                            line.To = Vector2.new(toPos.X, toPos.Y)
                            line.Color = ESPSettings.Colors.Skeleton
                            line.Thickness = dynamicThickness
                        else
                            line.Visible = false
                        end
                    else
                        line.Visible = false
                    end
                end
            else
                for _, line in pairs(esp.Skeleton) do
                    if line then
                        line.Visible = false
                    end
                end
            end

            if ESPSettings.Chams then
                if not esp.Chams then
                    esp.Chams = Instance.new("Highlight")
                    esp.Chams.Adornee = player.Character
                    esp.Chams.Parent = player.Character
                end
                esp.Chams.FillColor = ESPSettings.Colors.Chams
                esp.Chams.OutlineColor = ESPSettings.Colors.Chams
                esp.Chams.FillTransparency = 0.5
                esp.Chams.OutlineTransparency = 0
                esp.Chams.Enabled = true
            else
                if esp.Chams then
                    esp.Chams.Enabled = false
                end
            end
        end
    end

    local function SetupESP()
        for _, player in pairs(Players:GetPlayers()) do
            CreateESP(player)
        end
    end

    local ESPTab = TabsWindow:CreateTab({Name = "Visual"})
    ESPTab:Label({
        Text = "ESP Settings",
        TextXAlignment = Enum.TextXAlignment.Left,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Font = Enum.Font.FredokaOne
    })
    ESPTab:Checkbox({
        IniFlag = "ESPEnabled",
        Label = "Enable ESP",
        Value = false,
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, state)
            ESPSettings.Enabled = state
            SetupESP()
        end
    })
    ESPTab:Combo({
        IniFlag = "ESPDisplayMode",
        Label = "Display Mode",
        Selected = "All Players",
        Items = {"All Players", "Teammates", "Enemies"},
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, mode)
            ESPSettings.DisplayMode = mode
        end
    })
    ESPTab:Combo({
        IniFlag = "ESPBoxMode",
        Label = "Box Type",
        Selected = "2D Box",
        Items = {"None", "2D Box", "3D Box"},
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, mode)
            ESPSettings.BoxMode = mode
        end
    })
    ESPTab:Checkbox({
        IniFlag = "ESPName",
        Label = "Name",
        Value = true,
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, state)
            ESPSettings.Name = state
        end
    })
    ESPTab:Checkbox({
        IniFlag = "ESPDistance",
        Label = "Distance",
        Value = true,
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, state)
            ESPSettings.Distance = state
        end
    })
    ESPTab:Checkbox({
        IniFlag = "ESPHealth",
        Label = "Health",
        Value = true,
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, state)
            ESPSettings.Health = state
        end
    })
    ESPTab:Checkbox({
        IniFlag = "ESPSkeleton",
        Label = "Skeleton",
        Value = false,
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, state)
            ESPSettings.Skeleton = state
        end
    })
    ESPTab:Checkbox({
        IniFlag = "ESPChams",
        Label = "Chams",
        Value = false,
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, state)
            ESPSettings.Chams = state
        end
    })
    ESPTab:SliderInt({
        IniFlag = "ESPMaxDistance",
        Label = "Max Distance",
        Value = 5000,
        Minimum = 100,
        Maximum = 10000,
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, value)
            ESPSettings.MaxDistance = value
        end
    })
    ESPTab:InputText({
        IniFlag = "ESPBoxColor",
        Label = "Box Color (R,G,B)",
        Placeholder = "e.g. 0,255,255",
        Value = "0,255,255",
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, value)
            local r, g, b = value:match("(%d+),(%d+),(%d+)")
            if r and g and b then
                r, g, b = tonumber(r), tonumber(g), tonumber(b)
                if r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255 then
                    ESPSettings.Colors.Box = Color3.fromRGB(r, g, b)
                else
                    warn("Invalid RGB values for Box Color, values must be between 0 and 255")
                end
            else
                warn("Invalid format for Box Color, use R,G,B (e.g., 0,255,255)")
            end
        end
    })
    ESPTab:InputText({
        IniFlag = "ESPBox3DColor",
        Label = "3D Box Color (R,G,B)",
        Placeholder = "e.g. 0,255,0",
        Value = "0,255,0",
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, value)
            local r, g, b = value:match("(%d+),(%d+),(%d+)")
            if r and g and b then
                r, g, b = tonumber(r), tonumber(g), tonumber(b)
                if r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255 then
                    ESPSettings.Colors.Box3D = Color3.fromRGB(r, g, b)
                else
                    warn("Invalid RGB values for 3D Box Color, values must be between 0 and 255")
                end
            else
                warn("Invalid format for 3D Box Color, use R,G,B (e.g., 0,255,0)")
            end
        end
    })
    ESPTab:InputText({
        IniFlag = "ESPNameColor",
        Label = "Name Color (R,G,B)",
        Placeholder = "e.g. 200,240,255",
        Value = "200,240,255",
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, value)
            local r, g, b = value:match("(%d+),(%d+),(%d+)")
            if r and g and b then
                r, g, b = tonumber(r), tonumber(g), tonumber(b)
                if r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255 then
                    ESPSettings.Colors.Name = Color3.fromRGB(r, g, b)
                else
                    warn("Invalid RGB values for Name Color, values must be between 0 and 255")
                end
            else
                warn("Invalid format for Name Color, use R,G,B (e.g., 200,240,255)")
            end
        end
    })
    ESPTab:InputText({
        IniFlag = "ESPDistanceColor",
        Label = "Distance Color (R,G,B)",
        Placeholder = "e.g. 255,215,0",
        Value = "255,215,0",
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, value)
            local r, g, b = value:match("(%d+),(%d+),(%d+)")
            if r and g and b then
                r, g, b = tonumber(r), tonumber(g), tonumber(b)
                if r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255 then
                    ESPSettings.Colors.Distance = Color3.fromRGB(r, g, b)
                else
                    warn("Invalid RGB values for Distance Color, values must be between 0 and 255")
                end
            else
                warn("Invalid format for Distance Color, use R,G,B (e.g., 255,215,0)")
            end
        end
    })
    ESPTab:InputText({
        IniFlag = "ESPHealthColor",
        Label = "Health Color (R,G,B)",
        Placeholder = "e.g. 0,255,0",
        Value = "0,255,0",
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, value)
            local r, g, b = value:match("(%d+),(%d+),(%d+)")
            if r and g and b then
                r, g, b = tonumber(r), tonumber(g), tonumber(b)
                if r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255 then
                    ESPSettings.Colors.Health = Color3.fromRGB(r, g, b)
                else
                    warn("Invalid RGB values for Health Color, values must be between 0 and 255")
                end
            else
                warn("Invalid format for Health Color, use R,G,B (e.g., 0,255,0)")
            end
        end
    })
    ESPTab:InputText({
        IniFlag = "ESPSkeletonColor",
        Label = "Skeleton Color (R,G,B)",
        Placeholder = "e.g. 255,255,255",
        Value = "255,255,255",
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, value)
            local r, g, b = value:match("(%d+),(%d+),(%d+)")
            if r and g and b then
                r, g, b = tonumber(r), tonumber(g), tonumber(b)
                if r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255 then
                    ESPSettings.Colors.Skeleton = Color3.fromRGB(r, g, b)
                else
                    warn("Invalid RGB values for Skeleton Color, values must be between 0 and 255")
                end
            else
                warn("Invalid format for Skeleton Color, use R,G,B (e.g., 255,255,255)")
            end
        end
    })
    ESPTab:InputText({
        IniFlag = "ESPChamsColor",
        Label = "Chams Color (R,G,B)",
        Placeholder = "e.g. 255,0,0",
        Value = "255,0,0",
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Callback = function(self, value)
            local r, g, b = value:match("(%d+),(%d+),(%d+)")
            if r and g and b then
                r, g, b = tonumber(r), tonumber(g), tonumber(b)
                if r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255 then
                    ESPSettings.Colors.Chams = Color3.fromRGB(r, g, b)
                else
                    warn("Invalid RGB values for Chams Color, values must be between 0 and 255")
                end
            else
                warn("Invalid format for Chams Color, use R,G,B (e.g., 255,0,0)")
            end
        end
    })

    local playerAddedConnection = Players.PlayerAdded:Connect(function(player)
        if ESPSettings.Enabled then
            CreateESP(player)
        end
    end)
    table.insert(Connections, playerAddedConnection)

    local playerRemovingConnection = Players.PlayerRemoving:Connect(function(player)
        if ESPObjects[player] then
            for key, obj in pairs(ESPObjects[player]) do
                if key == "Skeleton" then
                    for _, line in pairs(obj) do
                        if line then
                            line:Remove()
                        end
                    end
                elseif key == "Chams" then
                    if obj then
                        obj:Destroy()
                    end
                elseif key == "Box3D" then
                    for _, line in pairs(obj.Lines) do
                        if line then
                            line:Remove()
                        end
                    end
                elseif key == "HealthBarBackground" or key == "HealthBarFill" or key == "HealthText" then
                    if obj then
                        obj:Remove()
                    end
                elseif obj then
                    obj:Remove()
                end
            end
            ESPObjects[player] = nil
        end
    end)
    table.insert(Connections, playerRemovingConnection)

    SetupESP()

    local updateConnection = RunService.RenderStepped:Connect(function()
        UpdateESP()
    end)
    table.insert(Connections, updateConnection)

    game:GetService("CoreGui").ChildRemoved:Connect(function(child)
        if child.Name == "VeryUpHackMenu" then
            for _, connection in pairs(Connections) do
                if connection then
                    connection:Disconnect()
                end
            end
            for _, esp in pairs(ESPObjects) do
                for key, obj in pairs(esp) do
                    if key == "Skeleton" then
                        for _, line in pairs(obj) do
                            if line then
                                line:Remove()
                            end
                        end
                    elseif key == "Chams" then
                        if obj then
                            obj:Destroy()
                        end
                    elseif key == "Box3D" then
                        for _, line in pairs(obj.Lines) do
                            if line then
                                line:Remove()
                            end
                        end
                    elseif key == "HealthBarBackground" or key == "HealthBarFill" or key == "HealthText" then
                        if obj then
                            obj:Remove()
                        end
                    elseif obj then
                        obj:Remove()
                    end
                end
            end
            ESPObjects = {}
        end
    end)

    warn("Very Up ESP v44 loaded successfully!")
end
