-- Функция создания линии
local function NewLine(color, thickness)
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = color
    line.Thickness = thickness
    line.Transparency = 1
    return line
end

-- Функция создания текста
local function NewText()
    local text = Drawing.new("Text")
    text.Size = 12
    text.Center = true
    text.Outline = true
    text.Visible = false
    return text
end

-- Показать/скрыть элементы
local function Vis(lib, state)
    for _, v in pairs(lib) do
        if v then v.Visible = state end
    end
end

-- Получение роли игрока
local function getPlayerRole(player)
    return player.Team and player.Team.Name or "Unknown"
end

-- Отношения команд
local TeamRelations = {
    ["Class D"] = { Allies = {"Chaos Insurgency"}, Enemies = {"Mobile Task Force", "Scientist", "SCP"} },
    ["Chaos Insurgency"] = { Allies = {"Class D"}, Enemies = {"Mobile Task Force", "Scientist", "SCP"} },
    ["Scientist"] = { Allies = {"Mobile Task Force"}, Enemies = {"Class D", "Chaos Insurgency", "SCP"} },
    ["Mobile Task Force"] = { Allies = {"Scientist"}, Enemies = {"Class D", "Chaos Insurgency", "SCP"} },
    ["SCP"] = { Allies = {}, Enemies = {"Class D", "Chaos Insurgency", "Mobile Task Force", "Scientist"} }
}

-- Получение цвета роли
local RoleColors = {
    ["Class D"] = Color3.fromRGB(255, 165, 0),
    ["SCP"] = Color3.fromRGB(255, 0, 0),
    ["Chaos Insurgency"] = Color3.fromRGB(0, 255, 0),
    ["Mobile Task Force"] = Color3.fromRGB(0, 0, 255),
    ["Scientist"] = Color3.fromRGB(255, 255, 0),
    ["Unknown"] = Color3.fromRGB(128, 128, 128)
}
local function getRoleColor(player)
    local role = getPlayerRole(player)
    return RoleColors[role] or Color3.fromRGB(255, 255, 255)
end

-- Проверка команды для Team Check
local function shouldShowESP(player, services, settings)
    if not player then return false end
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    if not settings.TeamCheck then return true end
    local localRole = getPlayerRole(services.LocalPlayer)
    local playerRole = getPlayerRole(player)
    local teamData = TeamRelations[localRole] or { Allies = {}, Enemies = {} }
    return table.find(teamData.Enemies, playerRole) ~= nil
end

-- Настройки
local Settings = {
    Enabled = true,
    MaxDistance = 1000,
    Box = true,
    BoxStyle = "Modern",
    Name = true,
    Distance = false,
    Health = false,
    Weapon = false,
    Role = false,
    TeamCheck = false,
    ItemESP = { Enabled = false, Box = false, BoxStyle = "Modern", Name = false, MaxDistance = 1000 },
    RoomESP = { 
        Enabled = false, 
        Name = false, 
        Distance = false, 
        MaxDistance = 1000, 
        Rooms = {
            ["914"] = { Path = "Light Containment Zone:914:Room:ResetPoint", Name = "Scp 914", Color = Color3.fromRGB(255, 255, 0) },
            ["CheckptB"] = { Path = "Light Containment Zone:CheckptB:Chkpt:Bounds:ResetPoint", Name = "Checkpoint B", Color = Color3.fromRGB(255, 255, 0) },
            ["CheckptA"] = { Path = "Light Containment Zone:CheckptA:Chkpt:Bounds:ResetPoint", Name = "Checkpoint A", Color = Color3.fromRGB(255, 255, 0) },
            ["173"] = { Path = "Light Containment Zone:173:Stairs:Bounds:ResetPoint", Name = "Scp 173", Color = Color3.fromRGB(255, 255, 0) },
            ["Armory"] = { Path = "Light Containment Zone:Armory:Room:Bounds:ResetPoint", Name = "Armory", Color = Color3.fromRGB(255, 255, 0) },
            ["330"] = { Path = "Light Containment Zone:330:Room:Bounds:ResetPoint", Name = "Scp 330", Color = Color3.fromRGB(255, 255, 0) },
            ["Cafe"] = { Path = "Light Containment Zone:Cafe:Room:Bounds:ResetPoint", Name = "Cafe", Color = Color3.fromRGB(255, 255, 0) },
            ["ClassD"] = { Path = "Light Containment Zone:Class D Spawn:Room:Bounds:ResetPoint", Name = "Class D", Color = Color3.fromRGB(255, 255, 0) },
            ["049"] = { Path = "Heavy Containment Zone:049:Room:Bounds:ResetPoint", Name = "Scp 049", Color = Color3.fromRGB(0, 0, 255) },
            ["079"] = { Path = "Heavy Containment Zone:079:Room:Bounds:ResetPoint", Name = "Scp 079", Color = Color3.fromRGB(0, 0, 255) },
            ["096"] = { Path = "Heavy Containment Zone:096:Room:Bounds:ResetPoint", Name = "Scp 096", Color = Color3.fromRGB(0, 0, 255) },
            ["106"] = { Path = "Heavy Containment Zone:106:Room:Bounds:ResetPoint", Name = "Scp 106", Color = Color3.fromRGB(0, 0, 255) },
            ["939"] = { Path = "Heavy Containment Zone:939:Room:Bounds:ResetPoint", Name = "Scp 939", Color = Color3.fromRGB(0, 0, 255) },
            ["Hid"] = { Path = "Heavy Containment Zone:Hid:Room:Bounds:ResetPoint", Name = "Hid", Color = Color3.fromRGB(0, 0, 255) },
            ["Servers"] = { Path = "Heavy Containment Zone:Servers:Room:Bounds:ResetPoint", Name = "Servers", Color = Color3.fromRGB(0, 0, 255) },
            ["Warhead"] = { Path = "Heavy Containment Zone:Warhead:Room:Bounds:ResetPoint", Name = "Warhead", Color = Color3.fromRGB(0, 0, 255) },
            ["NorthCheckpoint"] = { Path = "Heavy Containment Zone:North HCZ-EZ Checkpoint:HCZ Part:Room:Bounds:ResetPoint", Name = "North HCZ-EZ Checkpoint", Color = Color3.fromRGB(255, 0, 0) },
            ["SouthCheckpoint"] = { Path = "Heavy Containment Zone:South HCZ-EZ Checkpoint:HCZ Part:Room:Bounds:ResetPoint", Name = "South HCZ-EZ Checkpoint", Color = Color3.fromRGB(255, 0, 0) },
            ["GateA"] = { Path = "Entrance Zone:GateA:Room:Bounds:ResetPoint", Name = "Gate A", Color = Color3.fromRGB(255, 0, 0) },
            ["GateB"] = { Path = "Entrance Zone:GateB:Room:Bounds:ResetPoint", Name = "Gate B", Color = Color3.fromRGB(255, 0, 0) },
            ["End"] = { Path = "End:Room:Bounds:ResetPoint", Name = "End", Color = Color3.fromRGB(0, 100, 0) }
        }
    },
    Colors = {
        Box = Color3.fromRGB(255, 255, 255),
        Name = Color3.fromRGB(255, 255, 255),
        Distance = Color3.fromRGB(255, 255, 255),
        Health = Color3.fromRGB(255, 255, 255),
        Weapon = Color3.fromRGB(255, 255, 255),
        Role = Color3.fromRGB(255, 255, 255)
    }
}

-- Основная функция ESP для игроков
local function MainESP(model, services, settings)
    if not model then return end
    local Library = {
        Top = NewLine(settings.Colors.Box, 2),
        Bottom = NewLine(settings.Colors.Box, 2),
        Left = NewLine(settings.Colors.Box, 2),
        Right = NewLine(settings.Colors.Box, 2),
        TL1 = NewLine(settings.Colors.Box, 2),
        TL2 = NewLine(settings.Colors.Box, 2),
        TR1 = NewLine(settings.Colors.Box, 2),
        TR2 = NewLine(settings.Colors.Box, 2),
        BL1 = NewLine(settings.Colors.Box, 2),
        BL2 = NewLine(settings.Colors.Box, 2),
        BR1 = NewLine(settings.Colors.Box, 2),
        BR2 = NewLine(settings.Colors.Box, 2),
        Name = NewText(),
        Distance = NewText(),
        Health = NewText(),
        HealthBar = NewLine(Color3.fromRGB(0, 255, 0), 4),
        HealthBorderLeft = NewLine(Color3.fromRGB(0, 0, 0), 1),
        HealthBorderRight = NewLine(Color3.fromRGB(0, 0, 0), 1),
        Weapon = NewText(),
        Role = NewText()
    }

    local function Updater()
        local connection
        connection = services.RunService.RenderStepped:Connect(function()
            if not settings.Enabled then
                Vis(Library, false)
                return
            end

            local player = services.Players:GetPlayerFromCharacter(model)
            if not model or not model.Parent or (player and player == services.LocalPlayer) then
                for _, v in pairs(Library) do
                    if v.Remove then v:Remove() end
                end
                connection:Disconnect()
                return
            end

            local humanoid = model:FindFirstChild("Humanoid")
            local rootPart = model:FindFirstChild("HumanoidRootPart")
            if not humanoid or humanoid.Health <= 0 or not rootPart then
                Vis(Library, false)
                return
            end

            if player and not shouldShowESP(player, services, settings) then
                Vis(Library, false)
                return
            end

            local localRoot = services.LocalPlayer.Character and services.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local distance = localRoot and (localRoot.Position - rootPart.Position).Magnitude or math.huge
            if distance > settings.MaxDistance then
                Vis(Library, false)
                return
            end

            local topPos = rootPart.Position + Vector3.new(0, 3, 0)
            local bottomPos = rootPart.Position - Vector3.new(0, 3, 0)
            local topScreen, topOnScreen = services.Camera:WorldToViewportPoint(topPos)
            local bottomScreen, bottomOnScreen = services.Camera:WorldToViewportPoint(bottomPos)

            if not topOnScreen or not bottomOnScreen then
                Vis(Library, false)
                return
            end

            local height = bottomScreen.Y - topScreen.Y
            local width = height * 0.5
            local centerX = (topScreen.X + bottomScreen.X) / 2

            local TL = Vector2.new(centerX - width / 2, topScreen.Y)
            local TR = Vector2.new(centerX + width / 2, topScreen.Y)
            local BL = Vector2.new(centerX - width / 2, bottomScreen.Y)
            local BR = Vector2.new(centerX + width / 2, bottomScreen.Y)

            local boxColor = getRoleColor(player)
            local thickness = math.clamp(2 / (distance * 0.01), 1, 3) -- Фиксированная толщина с ограничением
            local offset = math.clamp(10 * (services.Camera.ViewportSize.Y / 1080), 5, 15) -- Масштабируемый offset

            if settings.Box then
                if settings.BoxStyle == "Default" then
                    Library.Top.From = TL
                    Library.Top.To = TR
                    Library.Top.Color = boxColor
                    Library.Top.Thickness = thickness
                    Library.Top.Visible = true

                    Library.Bottom.From = BL
                    Library.Bottom.To = BR
                    Library.Bottom.Color = boxColor
                    Library.Bottom.Thickness = thickness
                    Library.Bottom.Visible = true

                    Library.Left.From = TL
                    Library.Left.To = BL
                    Library.Left.Color = boxColor
                    Library.Left.Thickness = thickness
                    Library.Left.Visible = true

                    Library.Right.From = TR
                    Library.Right.To = BR
                    Library.Right.Color = boxColor
                    Library.Right.Thickness = thickness
                    Library.Right.Visible = true

                    Vis({Library.TL1, Library.TL2, Library.TR1, Library.TR2, Library.BL1, Library.BL2, Library.BR1, Library.BR2}, false)
                else
                    Library.TL1.From = TL
                    Library.TL1.To = Vector2.new(TL.X + offset, TL.Y)
                    Library.TL1.Color = boxColor
                    Library.TL1.Thickness = thickness
                    Library.TL1.Visible = true

                    Library.TL2.From = TL
                    Library.TL2.To = Vector2.new(TL.X, TL.Y + offset)
                    Library.TL2.Color = boxColor
                    Library.TL2.Thickness = thickness
                    Library.TL2.Visible = true

                    Library.TR1.From = TR
                    Library.TR1.To = Vector2.new(TR.X - offset, TR.Y)
                    Library.TR1.Color = boxColor
                    Library.TR1.Thickness = thickness
                    Library.TR1.Visible = true

                    Library.TR2.From = TR
                    Library.TR2.To = Vector2.new(TR.X, TR.Y + offset)
                    Library.TR2.Color = boxColor
                    Library.TR2.Thickness = thickness
                    Library.TR2.Visible = true

                    Library.BL1.From = BL
                    Library.BL1.To = Vector2.new(BL.X + offset, BL.Y)
                    Library.BL1.Color = boxColor
                    Library.BL1.Thickness = thickness
                    Library.BL1.Visible = true

                    Library.BL2.From = BL
                    Library.BL2.To = Vector2.new(BL.X, BL.Y - offset)
                    Library.BL2.Color = boxColor
                    Library.BL2.Thickness = thickness
                    Library.BL2.Visible = true

                    Library.BR1.From = BR
                    Library.BR1.To = Vector2.new(BR.X - offset, BR.Y)
                    Library.BR1.Color = boxColor
                    Library.BR1.Thickness = thickness
                    Library.BR1.Visible = true

                    Library.BR2.From = BR
                    Library.BR2.To = Vector2.new(BR.X, BR.Y - offset)
                    Library.BR2.Color = boxColor
                    Library.BR2.Thickness = thickness
                    Library.BR2.Visible = true

                    Vis({Library.Top, Library.Bottom, Library.Left, Library.Right}, false)
                end
            else
                Vis(Library, false)
            end

            local centerXText = (TL.X + TR.X) / 2
            local textSpacing = 15
            local topOffset = 0
            local bottomOffset = 0

            if settings.Role and player then
                Library.Role.Text = getPlayerRole(player)
                Library.Role.Position = Vector2.new(centerXText, TL.Y - textSpacing - topOffset)
                Library.Role.Color = settings.Colors.Role
                Library.Role.Visible = true
                topOffset = topOffset + textSpacing
            else
                Library.Role.Visible = false
            end

            if settings.Name and player then
                Library.Name.Text = player.Name
                Library.Name.Position = Vector2.new(centerXText, TL.Y - textSpacing - topOffset)
                Library.Name.Color = settings.Colors.Name
                Library.Name.Visible = true
                topOffset = topOffset + textSpacing
            else
                Library.Name.Visible = false
            end

            if settings.Distance then
                Library.Distance.Text = math.floor(distance) .. " studs"
                Library.Distance.Position = Vector2.new(centerXText, BL.Y + textSpacing + bottomOffset)
                Library.Distance.Color = settings.Colors.Distance
                Library.Distance.Visible = true
                bottomOffset = bottomOffset + textSpacing
            else
                Library.Distance.Visible = false
            end

            if settings.Health then
                local health = humanoid.Health
                local maxHealth = humanoid.MaxHealth
                Library.Health.Text = math.floor(health) .. "/" .. math.floor(maxHealth)
                Library.Health.Position = Vector2.new(centerXText, BL.Y + textSpacing + bottomOffset)
                Library.Health.Color = settings.Colors.Health
                Library.Health.Visible = true
                bottomOffset = bottomOffset + textSpacing

                local barWidth = 4
                local barHeight = BL.Y - TL.Y
                local healthRatio = math.max(0, math.min(1, health / maxHealth))
                local healthColor = Color3.fromRGB(255 * (1 - healthRatio), 255 * healthRatio, 0)

                Library.HealthBar:Remove()
                Library.HealthBorderLeft:Remove()
                Library.HealthBorderRight:Remove()
                Library.HealthBar = NewLine(healthColor, barWidth)
                Library.HealthBorderLeft = NewLine(Color3.fromRGB(0, 0, 0), 1)
                Library.HealthBorderRight = NewLine(Color3.fromRGB(0, 0, 0), 1)

                local barX = TR.X + 2
                Library.HealthBar.From = Vector2.new(barX, TL.Y + barHeight - (barHeight * healthRatio))
                Library.HealthBar.To = Vector2.new(barX, TL.Y + barHeight)
                Library.HealthBar.Visible = true

                Library.HealthBorderLeft.From = Vector2.new(barX - 2, TL.Y)
                Library.HealthBorderLeft.To = Vector2.new(barX - 2, TL.Y + barHeight)
                Library.HealthBorderLeft.Visible = true

                Library.HealthBorderRight.From = Vector2.new(barX + 2, TL.Y)
                Library.HealthBorderRight.To = Vector2.new(barX + 2, TL.Y + barHeight)
                Library.HealthBorderRight.Visible = true
            else
                Library.Health.Visible = false
                Library.HealthBar.Visible = false
                Library.HealthBorderLeft.Visible = false
                Library.HealthBorderRight.Visible = false
            end

            if settings.Weapon then
                local tool = model:FindFirstChildOfClass("Tool")
                Library.Weapon.Text = tool and tool.Name or "No Weapon"
                Library.Weapon.Position = Vector2.new(centerXText, BL.Y + textSpacing + bottomOffset)
                Library.Weapon.Color = settings.Colors.Weapon
                Library.Weapon.Visible = true
            else
                Library.Weapon.Visible = false
            end
        end)
    end
    coroutine.wrap(Updater)()
end

-- Основная функция Item ESP
local function MainItemESP(item, services, settings)
    if not item then return end
    repeat wait() until item:FindFirstChild("Handle") or item:FindFirstChildWhichIsA("BasePart")

    local Library = {
        Top = NewLine(Color3.fromRGB(255, 255, 255), 2),
        Bottom = NewLine(Color3.fromRGB(255, 255, 255), 2),
        Left = NewLine(Color3.fromRGB(255, 255, 255), 2),
        Right = NewLine(Color3.fromRGB(255, 255, 255), 2),
        TL1 = NewLine(Color3.fromRGB(255, 255, 255), 2),
        TL2 = NewLine(Color3.fromRGB(255, 255, 255), 2),
        TR1 = NewLine(Color3.fromRGB(255, 255, 255), 2),
        TR2 = NewLine(Color3.fromRGB(255, 255, 255), 2),
        BL1 = NewLine(Color3.fromRGB(255, 255, 255), 2),
        BL2 = NewLine(Color3.fromRGB(255, 255, 255), 2),
        BR1 = NewLine(Color3.fromRGB(255, 255, 255), 2),
        BR2 = NewLine(Color3.fromRGB(255, 255, 255), 2),
        Name = NewText()
    }

    local function Updater()
        local connection
        connection = services.RunService.RenderStepped:Connect(function()
            if not settings.ItemESP.Enabled then
                Vis(Library, false)
                return
            end

            if not item or not item.Parent or item.Parent == services.LocalPlayer.Character then
                for _, v in pairs(Library) do
                    if v.Remove then v:Remove() end
                end
                connection:Disconnect()
                return
            end

            local handle = item:FindFirstChild("Handle") or item:FindFirstChildWhichIsA("BasePart")
            if not handle then
                Vis(Library, false)
                return
            end

            local localRoot = services.LocalPlayer.Character and services.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local distance = localRoot and (localRoot.Position - handle.Position).Magnitude or math.huge
            if distance > settings.ItemESP.MaxDistance then
                Vis(Library, false)
                return
            end

            local pos, onScreen = services.Camera:WorldToViewportPoint(handle.Position)
            if not onScreen then
                Vis(Library, false)
                return
            end

            local boxHeight = 20
            local boxWidth = 30
            local boxOffsetY = boxHeight / 2
            local cornerLength = 6

            local TL = Vector2.new(pos.X - boxWidth / 2, pos.Y - boxOffsetY)
            local TR = Vector2.new(pos.X + boxWidth / 2, pos.Y - boxOffsetY)
            local BL = Vector2.new(pos.X - boxWidth / 2, pos.Y + boxOffsetY)
            local BR = Vector2.new(pos.X + boxWidth / 2, pos.Y + boxOffsetY)

            local thickness = math.clamp(1 / (distance * 0.01), 1, 3)
            local offset = math.clamp(10 * (services.Camera.ViewportSize.Y / 1080), 5, 15)

            if settings.ItemESP.Box then
                if settings.ItemESP.BoxStyle == "Default" then
                    Library.Top.From = TL
                    Library.Top.To = TR
                    Library.Top.Color = Color3.fromRGB(255, 255, 255)
                    Library.Top.Thickness = thickness
                    Library.Top.Visible = true

                    Library.Bottom.From = BL
                    Library.Bottom.To = BR
                    Library.Bottom.Color = Color3.fromRGB(255, 255, 255)
                    Library.Bottom.Thickness = thickness
                    Library.Bottom.Visible = true

                    Library.Left.From = TL
                    Library.Left.To = BL
                    Library.Left.Color = Color3.fromRGB(255, 255, 255)
                    Library.Left.Thickness = thickness
                    Library.Left.Visible = true

                    Library.Right.From = TR
                    Library.Right.To = BR
                    Library.Right.Color = Color3.fromRGB(255, 255, 255)
                    Library.Right.Thickness = thickness
                    Library.Right.Visible = true

                    Vis({Library.TL1, Library.TL2, Library.TR1, Library.TR2, Library.BL1, Library.BL2, Library.BR1, Library.BR2}, false)
                else
                    Library.TL1.From = TL
                    Library.TL1.To = Vector2.new(TL.X + offset, TL.Y)
                    Library.TL1.Color = Color3.fromRGB(255, 255, 255)
                    Library.TL1.Thickness = thickness
                    Library.TL1.Visible = true

                    Library.TL2.From = TL
                    Library.TL2.To = Vector2.new(TL.X, TL.Y + offset)
                    Library.TL2.Color = Color3.fromRGB(255, 255, 255)
                    Library.TL2.Thickness = thickness
                    Library.TL2.Visible = true

                    Library.TR1.From = TR
                    Library.TR1.To = Vector2.new(TR.X - offset, TR.Y)
                    Library.TR1.Color = Color3.fromRGB(255, 255, 255)
                    Library.TR1.Thickness = thickness
                    Library.TR1.Visible = true

                    Library.TR2.From = TR
                    Library.TR2.To = Vector2.new(TR.X, TR.Y + offset)
                    Library.TR2.Color = Color3.fromRGB(255, 255, 255)
                    Library.TR2.Thickness = thickness
                    Library.TR2.Visible = true

                    Library.BL1.From = BL
                    Library.BL1.To = Vector2.new(BL.X + offset, BL.Y)
                    Library.BL1.Color = Color3.fromRGB(255, 255, 255)
                    Library.BL1.Thickness = thickness
                    Library.BL1.Visible = true

                    Library.BL2.From = BL
                    Library.BL2.To = Vector2.new(BL.X, BL.Y - offset)
                    Library.BL2.Color = Color3.fromRGB(255, 255, 255)
                    Library.BL2.Thickness = thickness
                    Library.BL2.Visible = true

                    Library.BR1.From = BR
                    Library.BR1.To = Vector2.new(BR.X - offset, BR.Y)
                    Library.BR1.Color = Color3.fromRGB(255, 255, 255)
                    Library.BR1.Thickness = thickness
                    Library.BR1.Visible = true

                    Library.BR2.From = BR
                    Library.BR2.To = Vector2.new(BR.X, BR.Y - offset)
                    Library.BR2.Color = Color3.fromRGB(255, 255, 255)
                    Library.BR2.Thickness = thickness
                    Library.BR2.Visible = true

                    Vis({Library.Top, Library.Bottom, Library.Left, Library.Right}, false)
                end
            else
                Vis(Library, false)
            end

            if settings.ItemESP.Name then
                Library.Name.Text = item.Name
                Library.Name.Position = Vector2.new(pos.X, pos.Y - boxOffsetY - 20)
                Library.Name.Color = Color3.fromRGB(255, 255, 255)
                Library.Name.Visible = true
            else
                Library.Name.Visible = false
            end
        end)
    end
    coroutine.wrap(Updater)()
end

-- Основная функция Room ESP
local function MainRoomESP(roomName, roomData, services, settings)
    if not roomData then return end

    local function FindResetPoint()
        local pathParts = roomData.Path:split(":")
        local current = services.Workspace
        for _, part in ipairs(pathParts) do
            current = current:FindFirstChild(part)
            if not current then return nil end
        end
        return current
    end

    local resetPoint = FindResetPoint()
    if not resetPoint then return end

    local Library = {
        Name = NewText(),
        Distance = NewText()
    }

    local function Updater()
        local connection
        connection = services.RunService.RenderStepped:Connect(function()
            if not settings.RoomESP.Enabled then
                Vis(Library, false)
                return
            end

            if not resetPoint or not resetPoint.Parent then
                resetPoint = FindResetPoint()
                if not resetPoint then
                    for _, v in pairs(Library) do
                        if v.Remove then v:Remove() end
                    end
                    connection:Disconnect()
                    return
                end
            end

            local localRoot = services.LocalPlayer.Character and services.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local distance = localRoot and (localRoot.Position - resetPoint.Position).Magnitude or math.huge
            if distance > settings.RoomESP.MaxDistance then
                Vis(Library, false)
                return
            end

            local pos, onScreen = services.Camera:WorldToViewportPoint(resetPoint.Position)
            if not onScreen then
                Vis(Library, false)
                return
            end

            local textSpacing = 15
            local offset = 0

            if settings.RoomESP.Name then
                Library.Name.Text = roomData.Name
                Library.Name.Position = Vector2.new(pos.X, pos.Y - textSpacing - offset)
                Library.Name.Color = roomData.Color
                Library.Name.Visible = true
                offset = offset + textSpacing
            else
                Library.Name.Visible = false
            end

            if settings.RoomESP.Distance then
                Library.Distance.Text = math.floor(distance) .. " studs"
                Library.Distance.Position = Vector2.new(pos.X, pos.Y - textSpacing - offset)
                Library.Distance.Color = roomData.Color
                Library.Distance.Visible = true
            else
                Library.Distance.Visible = false
            end
        end)
    end
    coroutine.wrap(Updater)()
end

-- Инициализация ESP для игроков
local function initPlayerESP(services, settings)
    for _, player in pairs(services.Players:GetPlayers()) do
        if player ~= services.LocalPlayer then
            if player.Character then
                coroutine.wrap(MainESP)(player.Character, services, settings)
            end
            player.CharacterAdded:Connect(function(character)
                coroutine.wrap(MainESP)(character, services, settings)
            end)
        end
    end

    services.Players.PlayerAdded:Connect(function(player)
        if player == services.LocalPlayer then return end
        player.CharacterAdded:Connect(function(character)
            coroutine.wrap(MainESP)(character, services, settings)
        end)
    end)
end

-- Инициализация Item ESP
local function initItemESP(services, settings)
    for _, item in pairs(services.Workspace:GetDescendants()) do
        if item:IsA("Tool") and item.Parent == services.Workspace then
            coroutine.wrap(MainItemESP)(item, services, settings)
        end
    end

    services.Workspace.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("Tool") and descendant.Parent == services.Workspace then
            coroutine.wrap(MainItemESP)(descendant, services, settings)
        end
    end)
end

-- Инициализация Room ESP
local function initRoomESP(services, settings)
    for roomName, roomData in pairs(settings.RoomESP.Rooms) do
        coroutine.wrap(MainRoomESP)(roomName, roomData, services, settings)
    end

    services.Workspace.DescendantAdded:Connect(function(descendant)
        if not settings.RoomESP.Enabled then return end
        for roomName, roomData in pairs(settings.RoomESP.Rooms) do
            local pathParts = roomData.Path:split(":")
            local match = true
            local current = services.Workspace
            for _, part in ipairs(pathParts) do
                current = current:FindFirstChild(part)
                if not current then
                    match = false
                    break
                end
            end
            if match and current == descendant then
                coroutine.wrap(MainRoomESP)(roomName, roomData, services, settings)
            end
        end
    end)
end

-- Основная функция, которая будет вызвана из loader.lua
return function(VisualContent, services)
    -- Настройки
    local Settings = {
        Enabled = true,
        MaxDistance = 1000,
        Box = true,
        BoxStyle = "Modern",
        Name = true,
        Distance = false,
        Health = false,
        Weapon = false,
        Role = false,
        TeamCheck = false,
        ItemESP = { Enabled = false, Box = false, BoxStyle = "Modern", Name = false, MaxDistance = 1000 },
        RoomESP = { 
            Enabled = false, 
            Name = false, 
            Distance = false, 
            MaxDistance = 1000, 
            Rooms = {
                ["914"] = { Path = "Light Containment Zone:914:Room:ResetPoint", Name = "Scp 914", Color = Color3.fromRGB(255, 255, 0) },
                ["CheckptB"] = { Path = "Light Containment Zone:CheckptB:Chkpt:Bounds:ResetPoint", Name = "Checkpoint B", Color = Color3.fromRGB(255, 255, 0) },
                ["CheckptA"] = { Path = "Light Containment Zone:CheckptA:Chkpt:Bounds:ResetPoint", Name = "Checkpoint A", Color = Color3.fromRGB(255, 255, 0) },
                ["173"] = { Path = "Light Containment Zone:173:Stairs:Bounds:ResetPoint", Name = "Scp 173", Color = Color3.fromRGB(255, 255, 0) },
                ["Armory"] = { Path = "Light Containment Zone:Armory:Room:Bounds:ResetPoint", Name = "Armory", Color = Color3.fromRGB(255, 255, 0) },
                ["330"] = { Path = "Light Containment Zone:330:Room:Bounds:ResetPoint", Name = "Scp 330", Color = Color3.fromRGB(255, 255, 0) },
                ["Cafe"] = { Path = "Light Containment Zone:Cafe:Room:Bounds:ResetPoint", Name = "Cafe", Color = Color3.fromRGB(255, 255, 0) },
                ["ClassD"] = { Path = "Light Containment Zone:Class D Spawn:Room:Bounds:ResetPoint", Name = "Class D", Color = Color3.fromRGB(255, 255, 0) },
                ["049"] = { Path = "Heavy Containment Zone:049:Room:Bounds:ResetPoint", Name = "Scp 049", Color = Color3.fromRGB(0, 0, 255) },
                ["079"] = { Path = "Heavy Containment Zone:079:Room:Bounds:ResetPoint", Name = "Scp 079", Color = Color3.fromRGB(0, 0, 255) },
                ["096"] = { Path = "Heavy Containment Zone:096:Room:Bounds:ResetPoint", Name = "Scp 096", Color = Color3.fromRGB(0, 0, 255) },
                ["106"] = { Path = "Heavy Containment Zone:106:Room:Bounds:ResetPoint", Name = "Scp 106", Color = Color3.fromRGB(0, 0, 255) },
                ["939"] = { Path = "Heavy Containment Zone:939:Room:Bounds:ResetPoint", Name = "Scp 939", Color = Color3.fromRGB(0, 0, 255) },
                ["Hid"] = { Path = "Heavy Containment Zone:Hid:Room:Bounds:ResetPoint", Name = "Hid", Color = Color3.fromRGB(0, 0, 255) },
                ["Servers"] = { Path = "Heavy Containment Zone:Servers:Room:Bounds:ResetPoint", Name = "Servers", Color = Color3.fromRGB(0, 0, 255) },
                ["Warhead"] = { Path = "Heavy Containment Zone:Warhead:Room:Bounds:ResetPoint", Name = "Warhead", Color = Color3.fromRGB(0, 0, 255) },
                ["NorthCheckpoint"] = { Path = "Heavy Containment Zone:North HCZ-EZ Checkpoint:HCZ Part:Room:Bounds:ResetPoint", Name = "North HCZ-EZ Checkpoint", Color = Color3.fromRGB(255, 0, 0) },
                ["SouthCheckpoint"] = { Path = "Heavy Containment Zone:South HCZ-EZ Checkpoint:HCZ Part:Room:Bounds:ResetPoint", Name = "South HCZ-EZ Checkpoint", Color = Color3.fromRGB(255, 0, 0) },
                ["GateA"] = { Path = "Entrance Zone:GateA:Room:Bounds:ResetPoint", Name = "Gate A", Color = Color3.fromRGB(255, 0, 0) },
                ["GateB"] = { Path = "Entrance Zone:GateB:Room:Bounds:ResetPoint", Name = "Gate B", Color = Color3.fromRGB(255, 0, 0) },
                ["End"] = { Path = "End:Room:Bounds:ResetPoint", Name = "End", Color = Color3.fromRGB(0, 100, 0) }
            }
        },
        Colors = {
            Box = Color3.fromRGB(255, 255, 255),
            Name = Color3.fromRGB(255, 255, 255),
            Distance = Color3.fromRGB(255, 255, 255),
            Health = Color3.fromRGB(255, 255, 255),
            Weapon = Color3.fromRGB(255, 255, 255),
            Role = Color3.fromRGB(255, 255, 255)
        }
    }

    -- Инициализация всех типов ESP
    initPlayerESP(services, Settings)
    initItemESP(services, Settings)
    initRoomESP(services, Settings)

    -- UI Elements
    if not VisualContent or not VisualContent.CollapsingHeader then
        warn("VisualContent is invalid or does not support CollapsingHeader")
        return
    end

    local GeneralSettings = VisualContent:CollapsingHeader({ Title = "General Settings" })
    if not GeneralSettings then
        warn("Failed to create GeneralSettings CollapsingHeader")
        return
    end

    GeneralSettings:Checkbox({ Label = "ESP On", Value = true, Callback = function(_, value) Settings.Enabled = value end })
    GeneralSettings:SliderInt({ Label = "Max Distance", Value = 1000, Minimum = 100, Maximum = 5000, Callback = function(_, value) Settings.MaxDistance = value end })
    GeneralSettings:Checkbox({ Label = "Team Check", Value = false, Callback = function(_, value) Settings.TeamCheck = value end })

    local VisualElements = VisualContent:CollapsingHeader({ Title = "Visual Elements" })
    VisualElements:Checkbox({ Label = "Box ESP", Value = true, Callback = function(_, value) Settings.Box = value end })
    VisualElements:Combo({ Label = "Box Style", Selected = "Modern", Items = {"Default", "Modern"}, Callback = function(_, value) Settings.BoxStyle = value end })
    VisualElements:Checkbox({ Label = "Name ESP", Value = true, Callback = function(_, value) Settings.Name = value end })
    VisualElements:Checkbox({ Label = "Distance ESP", Value = false, Callback = function(_, value) Settings.Distance = value end })
    VisualElements:Checkbox({ Label = "Health ESP", Value = false, Callback = function(_, value) Settings.Health = value end })
    VisualElements:Checkbox({ Label = "Weapon ESP", Value = false, Callback = function(_, value) Settings.Weapon = value end })
    VisualElements:Checkbox({ Label = "Role ESP", Value = false, Callback = function(_, value) Settings.Role = value end })

    local ColorsSettings = VisualElements:TreeNode({ Title = "Colors" })
    ColorsSettings:InputColor3({ Label = "Box Color", Value = Settings.Colors.Box, Callback = function(_, value) Settings.Colors.Box = value end })
    ColorsSettings:InputColor3({ Label = "Name Color", Value = Settings.Colors.Name, Callback = function(_, value) Settings.Colors.Name = value end })
    ColorsSettings:InputColor3({ Label = "Distance Color", Value = Settings.Colors.Distance, Callback = function(_, value) Settings.Colors.Distance = value end })
    ColorsSettings:InputColor3({ Label = "Health Color", Value = Settings.Colors.Health, Callback = function(_, value) Settings.Colors.Health = value end })
    ColorsSettings:InputColor3({ Label = "Weapon Color", Value = Settings.Colors.Weapon, Callback = function(_, value) Settings.Colors.Weapon = value end })
    ColorsSettings:InputColor3({ Label = "Role Color", Value = Settings.Colors.Role, Callback = function(_, value) Settings.Colors.Role = value end })

    local ItemESP = VisualElements:TreeNode({ Title = "Item ESP" })
    ItemESP:Checkbox({ Label = "Enable Item ESP", Value = false, Callback = function(_, value) Settings.ItemESP.Enabled = value end })
    ItemESP:Checkbox({ Label = "Item Box ESP", Value = false, Callback = function(_, value) Settings.ItemESP.Box = value end })
    ItemESP:Combo({ Label = "Item Box Style", Selected = "Modern", Items = {"Default", "Modern"}, Callback = function(_, value) Settings.ItemESP.BoxStyle = value end })
    ItemESP:Checkbox({ Label = "Item Name ESP", Value = false, Callback = function(_, value) Settings.ItemESP.Name = value end })
    ItemESP:SliderInt({ Label = "Item Max Distance", Value = 1000, Minimum = 100, Maximum = 5000, Callback = function(_, value) Settings.ItemESP.MaxDistance = value end })

    local RoomsSettings = VisualElements:TreeNode({ Title = "Rooms" })
    RoomsSettings:Checkbox({ Label = "Room Enable", Value = false, Callback = function(_, value) Settings.RoomESP.Enabled = value end })
    RoomsSettings:Checkbox({ Label = "Name", Value = false, Callback = function(_, value) Settings.RoomESP.Name = value end })
    RoomsSettings:Checkbox({ Label = "Distance", Value = false, Callback = function(_, value) Settings.RoomESP.Distance = value end })
    RoomsSettings:SliderInt({ Label = "Room Max Distance", Value = 1000, Minimum = 100, Maximum = 5000, Callback = function(_, value) Settings.RoomESP.MaxDistance = value end })
end
